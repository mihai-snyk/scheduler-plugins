/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// SchedulingHintSpecApplyConfiguration represents a declarative configuration of the SchedulingHintSpec type for use
// with apply.
type SchedulingHintSpecApplyConfiguration struct {
	ClusterFingerprint             *string                                    `json:"clusterFingerprint,omitempty"`
	ClusterNodes                   []string                                   `json:"clusterNodes,omitempty"`
	OriginalReplicaSetDistribution []ReplicaSetDistributionApplyConfiguration `json:"originalReplicaSetDistribution,omitempty"`
	Solutions                      []OptimizationSolutionApplyConfiguration   `json:"solutions,omitempty"`
	ExpirationTime                 *v1.Time                                   `json:"expirationTime,omitempty"`
	GeneratedAt                    *v1.Time                                   `json:"generatedAt,omitempty"`
	DeschedulerVersion             *string                                    `json:"deschedulerVersion,omitempty"`
}

// SchedulingHintSpecApplyConfiguration constructs a declarative configuration of the SchedulingHintSpec type for use with
// apply.
func SchedulingHintSpec() *SchedulingHintSpecApplyConfiguration {
	return &SchedulingHintSpecApplyConfiguration{}
}

// WithClusterFingerprint sets the ClusterFingerprint field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ClusterFingerprint field is set to the value of the last call.
func (b *SchedulingHintSpecApplyConfiguration) WithClusterFingerprint(value string) *SchedulingHintSpecApplyConfiguration {
	b.ClusterFingerprint = &value
	return b
}

// WithClusterNodes adds the given value to the ClusterNodes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClusterNodes field.
func (b *SchedulingHintSpecApplyConfiguration) WithClusterNodes(values ...string) *SchedulingHintSpecApplyConfiguration {
	for i := range values {
		b.ClusterNodes = append(b.ClusterNodes, values[i])
	}
	return b
}

// WithOriginalReplicaSetDistribution adds the given value to the OriginalReplicaSetDistribution field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the OriginalReplicaSetDistribution field.
func (b *SchedulingHintSpecApplyConfiguration) WithOriginalReplicaSetDistribution(values ...*ReplicaSetDistributionApplyConfiguration) *SchedulingHintSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithOriginalReplicaSetDistribution")
		}
		b.OriginalReplicaSetDistribution = append(b.OriginalReplicaSetDistribution, *values[i])
	}
	return b
}

// WithSolutions adds the given value to the Solutions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Solutions field.
func (b *SchedulingHintSpecApplyConfiguration) WithSolutions(values ...*OptimizationSolutionApplyConfiguration) *SchedulingHintSpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithSolutions")
		}
		b.Solutions = append(b.Solutions, *values[i])
	}
	return b
}

// WithExpirationTime sets the ExpirationTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ExpirationTime field is set to the value of the last call.
func (b *SchedulingHintSpecApplyConfiguration) WithExpirationTime(value v1.Time) *SchedulingHintSpecApplyConfiguration {
	b.ExpirationTime = &value
	return b
}

// WithGeneratedAt sets the GeneratedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the GeneratedAt field is set to the value of the last call.
func (b *SchedulingHintSpecApplyConfiguration) WithGeneratedAt(value v1.Time) *SchedulingHintSpecApplyConfiguration {
	b.GeneratedAt = &value
	return b
}

// WithDeschedulerVersion sets the DeschedulerVersion field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the DeschedulerVersion field is set to the value of the last call.
func (b *SchedulingHintSpecApplyConfiguration) WithDeschedulerVersion(value string) *SchedulingHintSpecApplyConfiguration {
	b.DeschedulerVersion = &value
	return b
}
