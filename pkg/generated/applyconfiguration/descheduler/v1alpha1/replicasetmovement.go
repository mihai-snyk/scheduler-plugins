/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// ReplicaSetMovementApplyConfiguration represents a declarative configuration of the ReplicaSetMovement type for use
// with apply.
type ReplicaSetMovementApplyConfiguration struct {
	ReplicaSetName     *string        `json:"replicaSetName,omitempty"`
	Namespace          *string        `json:"namespace,omitempty"`
	TargetDistribution map[string]int `json:"targetDistribution,omitempty"`
	AvailableSlots     map[string]int `json:"availableSlots,omitempty"`
	ScheduledCount     map[string]int `json:"scheduledCount,omitempty"`
	Reason             *string        `json:"reason,omitempty"`
}

// ReplicaSetMovementApplyConfiguration constructs a declarative configuration of the ReplicaSetMovement type for use with
// apply.
func ReplicaSetMovement() *ReplicaSetMovementApplyConfiguration {
	return &ReplicaSetMovementApplyConfiguration{}
}

// WithReplicaSetName sets the ReplicaSetName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ReplicaSetName field is set to the value of the last call.
func (b *ReplicaSetMovementApplyConfiguration) WithReplicaSetName(value string) *ReplicaSetMovementApplyConfiguration {
	b.ReplicaSetName = &value
	return b
}

// WithNamespace sets the Namespace field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Namespace field is set to the value of the last call.
func (b *ReplicaSetMovementApplyConfiguration) WithNamespace(value string) *ReplicaSetMovementApplyConfiguration {
	b.Namespace = &value
	return b
}

// WithTargetDistribution puts the entries into the TargetDistribution field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the TargetDistribution field,
// overwriting an existing map entries in TargetDistribution field with the same key.
func (b *ReplicaSetMovementApplyConfiguration) WithTargetDistribution(entries map[string]int) *ReplicaSetMovementApplyConfiguration {
	if b.TargetDistribution == nil && len(entries) > 0 {
		b.TargetDistribution = make(map[string]int, len(entries))
	}
	for k, v := range entries {
		b.TargetDistribution[k] = v
	}
	return b
}

// WithAvailableSlots puts the entries into the AvailableSlots field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the AvailableSlots field,
// overwriting an existing map entries in AvailableSlots field with the same key.
func (b *ReplicaSetMovementApplyConfiguration) WithAvailableSlots(entries map[string]int) *ReplicaSetMovementApplyConfiguration {
	if b.AvailableSlots == nil && len(entries) > 0 {
		b.AvailableSlots = make(map[string]int, len(entries))
	}
	for k, v := range entries {
		b.AvailableSlots[k] = v
	}
	return b
}

// WithScheduledCount puts the entries into the ScheduledCount field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the ScheduledCount field,
// overwriting an existing map entries in ScheduledCount field with the same key.
func (b *ReplicaSetMovementApplyConfiguration) WithScheduledCount(entries map[string]int) *ReplicaSetMovementApplyConfiguration {
	if b.ScheduledCount == nil && len(entries) > 0 {
		b.ScheduledCount = make(map[string]int, len(entries))
	}
	for k, v := range entries {
		b.ScheduledCount[k] = v
	}
	return b
}

// WithReason sets the Reason field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Reason field is set to the value of the last call.
func (b *ReplicaSetMovementApplyConfiguration) WithReason(value string) *ReplicaSetMovementApplyConfiguration {
	b.Reason = &value
	return b
}
